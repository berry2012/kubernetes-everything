apiVersion: apps/v1
kind: Deployment
metadata:
  name: wale-nginx-deployment
  labels:
    app: wale-nginx
spec:
  replicas: 1
  selector:
    matchLabels:
      app: wale-nginx
  template:
    metadata:
      labels:
        app: wale-nginx
    spec:
      topologySpreadConstraints:
      - maxSkew: 1 #distribute pods in an absolute even manner
        topologyKey: topology.kubernetes.io/zone # the even distribution will only be applied to nodes that are labelled zone: <any value> (nodes that don't have a zone label are skipped).
        whenUnsatisfiable: DoNotSchedule #tells the scheduler to let the incoming Pod stay pending if the scheduler can't find a way to satisfy the constraint.
        labelSelector:  #only act on Pods that match this selector
          matchLabels:
            app: wale-nginx
      containers:
      - name: wale-nginx
        image: nginx:1.14.2
        ports:
        - containerPort: 80

---
apiVersion: v1
kind: Service
metadata:
  name: wale-nginx-service
spec:
  selector:
    app: wale-nginx
  type: NodePort
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 80

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: wale-nginx-ingress
  namespace: wale-demo
  annotations:
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/group.name: my-shared-ingress # to be used by multiple services. Edit ingress and delete finalizers to be able to delete the ingress, otherwise, it will hang.
    alb.ingress.kubernetes.io/tags: Auto-delete=no, Workload=rancher-eks-poc, Automation=shutdown-cob
spec:
  ingressClassName: alb
  rules:
    - host: wale-demo-ranchercicd.whalecloud.awsps.myinstance.com
      http:
        paths:
        - path: /
          pathType: Prefix
          backend:
            service:
              name: wale-nginx-service
              port:
                number: 8080

# kubectl get pods -l 'app=wale-nginx' -o wide | awk {'print $1" " $3 " " $6'} | column -t
