
global:
  imageRegistry: ""
  imagePullSecrets: []
  compatibility:
    openshift:
      ## @param global.compatibility.openshift.adaptSecurityContext Adapt the securityContext sections of the deployment to make them compatible with Openshift restricted-v2 SCC: remove runAsUser, runAsGroup and fsGroup and let the platform use their allowed default IDs. Possible values: auto (apply if the detected running cluster is Openshift), force (perform the adaptation always), disabled (do not perform adaptation)
      ##
      adaptSecurityContext: auto
nameOverride: ""
fullnameOverride: ""
namespaceOverride: ""
kubeVersion: ""
clusterDomain: cluster.local
extraDeploy: []
commonLabels: {}
commonAnnotations: {}
diagnosticMode:
  enabled: false
  command:
    - sleep
  args:
    - infinity

image:
  registry: docker.io
  repository: nginx
  tag: latest
  digest: ""

  pullPolicy: IfNotPresent
  pullSecrets: []
  debug: false
automountServiceAccountToken: false
hostAliases: []
command: []
args: []

extraEnvVars: []

extraEnvVarsCM: ""

extraEnvVarsSecret: ""

replicaCount: 1

revisionHistoryLimit: 10

updateStrategy:
  type: RollingUpdate
  rollingUpdate: {}

podLabels: {}

podAnnotations: {}

podAffinityPreset: ""

podAntiAffinityPreset: soft

nodeAffinityPreset:
  type: ""
  key: ""
  values: []

affinity: {}

hostNetwork: false

hostIPC: false

nodeSelector: {}

tolerations: []

priorityClassName: ""

schedulerName: ""

terminationGracePeriodSeconds: ""

topologySpreadConstraints: []
resources: {}
customStartupProbe: {}
## @param customLivenessProbe Override default liveness probe
##
customLivenessProbe: {}
## @param customReadinessProbe Override default readiness probe
##
customReadinessProbe: {}

autoscaling:
  enabled: false
  minReplicas: ""
  maxReplicas: ""
  targetCPU: ""
  targetMemory: ""


service:
  ## @param service.type Service type
  ##
  type: NodePort

  ports:
    http: 80


  nodePorts:
    http: ""
    https: ""

  targetPort:
    http: http

 
  clusterIP: ""

  loadBalancerIP: ""
 

##
ingress:
  ## @param ingress.enabled Set to true to enable ingress record generation
  ##
  enabled: true
  ## @param ingress.selfSigned Create a TLS secret for this ingress record using self-signed certificates generated by Helm
  ##
  selfSigned: false
  ## @param ingress.pathType Ingress path type
  ##
  pathType: ImplementationSpecific
  ## @param ingress.apiVersion Force Ingress API version (automatically detected if not set)
  ##
  apiVersion: ""
  ## @param ingress.hostname Default host for the ingress resource
  ##
  hostname: nginx.whalecloud.awsps.myinstance.com
  ## @param ingress.path The Path to Nginx. You may need to set this to '/*' in order to use this with ALB ingress controllers.
  ##
  path: /
  annotations:
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP":80}]'
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/group.name: my-shared-ingress  
  ingressClassName: "alb"
